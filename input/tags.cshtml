ArchiveSources: => GetString("PostSources")
ArchiveFilter: => GetBool("IsPost")
ArchiveKey: Tags
ArchiveKeyComparer: => StringComparer.OrdinalIgnoreCase.ToConvertingEqualityComparer()
ArchiveDestination: >
  => GetInt("Index") <= 1 ? $"tags/{NormalizedPath.OptimizeFileName(GetString("GroupKey"))}/index.html" : $"tags/{NormalizedPath.OptimizeFileName(GetString("GroupKey"))}/{GetInt("Index")}.html"
ArchivePageSize: 10
ArchiveOrderKey: Published
ArchiveOrderDescending: true
Title: Tags
ArchiveTitle: => GetString("GroupKey")
---

@if (Document.ContainsKey(Keys.GroupKey))
{
	Layout = "~/_noBoxLayout.cshtml";

	@Html.Partial("/_posts.cshtml", 
					Document,
					new ViewDataDictionary(ViewData)
                                {
                                    { "path", "tags" },
                                    { "isIndex", "false" }
                                }
				)
}
else
{ 
	Layout = "~/_layout.cshtml";

    @foreach (IDocument tag in Document.GetChildren().OrderByDescending(x => x.GetChildren().Count()))
    {
        string postCount = tag.GetChildren().Count().ToString();
        <a role="button" href="@Context.GetLink(tag)" class="badge badge-light"> @tag.GetTitle() (@postCount)</a>
    }
}